import React, { useState } from "react";
import "../styles/OrderManagement.css";

const removeVietnameseTones = (str) => {
  return str.normalize("NFD")
    .replace(/\p{Diacritic}/gu, "")
    .replace(/ƒë/g, "d").replace(/ƒê/g, "D")
    .toLowerCase().replace(/\s+/g, "-");
};

const OrderManagement = () => {
  const [orders, setOrders] = useState([
    {
      id: "ORD12345",
      date: "20/03/2025",
      total: "450.000ƒë",
      status: "ƒêang giao",
      receiver: "Nguy·ªÖn VƒÉn A",
      address: "S·ªë 18-20/322 Nh√¢n M·ªπ - M·ªπ ƒê√¨nh 1 - H√† N·ªôi",
      phone: "0987654321",
      deliveryDate: "23/03/2025",
      items: [
        { code: "SP001", name: "√Åo thun nam", size: "M", color: "ƒêen", quantity: 1, price: 250000, link: "/product/SP001" },
        { code: "SP002", name: "Qu·∫ßn jeans", size: "L", color: "Xanh", quantity: 1, price: 200000, link: "/product/SP002" }
      ]
    },
    {
      id: "ORD67890",
      date: "18/03/2025",
      total: "800.000ƒë",
      status: "Ho√†n th√†nh",
      receiver: "Tr·∫ßn B·∫£o Ng·ªçc",
      address: "Km 3 + 350 ƒê∆∞·ªùng Phan Tr·ªçng Tu·ªá - Thanh Tr√¨ - H√† N·ªôi",
      phone: "0912345678",
      deliveryDate: "20/03/2025",
      items: [
        { code: "SP003", name: "Gi√†y sneaker", size: "42", color: "Tr·∫Øng", quantity: 1, price: 650000, link: "/product/SP001" },
        { code: "SP004", name: "Balo th·ªùi trang", size: "Free size", color: "ƒêen", quantity: 1, price: 300000, link: "/product/SP001" }
      ]
    },
    {
      id: "ORD99999",
      date: "17/03/2025",
      total: "500.000ƒë",
      status: "Ch∆∞a x·ª≠ l√Ω",
      receiver: "L√™ Th·ªã Minh",
      address: "S·ªë 12, ƒê∆∞·ªùng Nguy·ªÖn Tr√£i - Thanh Xu√¢n - H√† N·ªôi",
      phone: "0909876543",
      deliveryDate: "20/03/2025",
      items: [
        { code: "SP005", name: "√Åo hoodie", size: "XL", color: "Ghi", quantity: 1, price: 300000, link: "/product/SP001" },
        { code: "SP006", name: "M≈© len", size: "Free size", color: "ƒê·ªè", quantity: 1, price: 300000, link: "/product/SP001" }
      ]
    }
  ]);

  const [selectedStatus, setSelectedStatus] = useState("T·∫•t c·∫£");
  const [expandedOrders, setExpandedOrders] = useState([]);

  const statusCounts = {
    "Ch∆∞a x·ª≠ l√Ω": orders.filter(order => order.status === "Ch∆∞a x·ª≠ l√Ω").length,
    "ƒê√£ x√°c nh·∫≠n": orders.filter(order => order.status === "ƒê√£ x√°c nh·∫≠n").length,
    "ƒêang giao": orders.filter(order => order.status === "ƒêang giao").length,
    "Ho√†n th√†nh": orders.filter(order => order.status === "Ho√†n th√†nh").length,
    "B·ªã h·ªßy": orders.filter(order => order.status === "B·ªã h·ªßy").length
  };

  const filteredOrders = selectedStatus === "T·∫•t c·∫£"
    ? orders
    : orders.filter(order => order.status === selectedStatus);

  const toggleStatusFilter = (status) => {
    setSelectedStatus(selectedStatus === status ? "T·∫•t c·∫£" : status);
  };

  const toggleOrderDetails = (id) => {
    setExpandedOrders(expandedOrders.includes(id)
      ? expandedOrders.filter(orderId => orderId !== id)
      : [...expandedOrders, id]
    );
  };

  const handleCancelOrder = (id) => {
    setOrders(orders.map(order =>
      order.id === id && (order.status === "Ch∆∞a x·ª≠ l√Ω" || order.status === "ƒê√£ x√°c nh·∫≠n")
        ? { ...order, status: "B·ªã h·ªßy" }
        : order
    ));
  };

  return (
    <div className="order-management">
      <h2>Qu·∫£n L√Ω ƒê∆°n H√†ng</h2>

      <div className="order-status-summary">
      {Object.entries(statusCounts).map(([status, count]) => {
        const statusClass = `status-box ${selectedStatus === status ? "active" : ""} ${removeVietnameseTones(status)}`;
        return (
          <button key={status} className={statusClass} onClick={() => toggleStatusFilter(status)}>
            {status} <span>({count})</span>
          </button>
        );
      })}

      </div>

      <table className="order-table">
        <thead>
          <tr>
            <th>M√£ ƒê∆°n</th>
            <th>Ng√†y ƒê·∫∑t</th>
            <th>T·ªïng Ti·ªÅn</th>
            <th>Tr·∫°ng Th√°i</th>
            <th>H√†nh ƒê·ªông</th>
          </tr>
        </thead>
        <tbody>
          {filteredOrders.map((order) => (
            <React.Fragment key={order.id}>
              <tr>
                <td>{order.id}</td>
                <td>{order.date}</td>
                <td>{order.total}</td>
                <td>
                  <span className={`status-label ${removeVietnameseTones(order.status)}`}>
                    {order.status}
                  </span>
                </td>
                <td>
                  <button className="view-btn" onClick={() => toggleOrderDetails(order.id)}>
                    {expandedOrders.includes(order.id) ? "‚ùå ƒê√≥ng" : "üëÅ Xem"}
                  </button>
                  {(order.status === "Ch∆∞a x·ª≠ l√Ω" || order.status === "ƒê√£ x√°c nh·∫≠n") && (
                    <button className="cancel-btn" onClick={() => handleCancelOrder(order.id)}>‚ùå H·ªßy</button>
                  )}
                </td>
              </tr>

              {expandedOrders.includes(order.id) && (
                <tr className="order-detail-row">
                  <td colSpan="5">
                    <div className="order-detail-content">
                      <div className="order-info">
                        <h4>Th√¥ng Tin Giao H√†ng</h4>
                        <p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {order.receiver}</p>
                        <p><strong>ƒê·ªãa ch·ªâ Nh·∫≠n H√†ng:</strong> {order.address}</p>
                        <p><strong>S·ªë ƒêi·ªán Tho·∫°i:</strong> {order.phone}</p>
                        <p><strong>Ng√†y Nh·∫≠n D·ª± Ki·∫øn:</strong> {order.deliveryDate}</p>
                      </div>

                      <div className="product-list">
                        <h4>Th√¥ng Tin S·∫£n Ph·∫©m</h4>
                        <table className="product-table">
                          <thead>
                            <tr>
                              <th>M√£ SP</th>
                              <th>T√™n SP</th>
                              <th>Size</th>
                              <th>M√†u</th>
                              <th>SL</th>
                              <th>ƒê∆°n gi√°</th>
                              <th>Th√†nh ti·ªÅn</th>
                            </tr>
                          </thead>
                          <tbody>
                            {order.items.map((item, index) => (
                              <tr key={index}>
                                <td>{item.code}</td>
                                <td><a href={item.link}>{item.name}</a></td>
                                <td>{item.size}</td>
                                <td>{item.color}</td>
                                <td>{item.quantity}</td>
                                <td>{item.price.toLocaleString()}ƒë</td>
                                <td>{(item.price * item.quantity).toLocaleString()}ƒë</td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </td>
                </tr>
              )}
            </React.Fragment>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default OrderManagement;
